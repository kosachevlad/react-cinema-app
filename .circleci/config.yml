version: 2.1

orbs:
  telegram-orb: uniqueck/telegram-orb@0.0.1

executors:
  app-executor:
    docker:
      - image: circleci/node:16.10.0
    working_directory: ~/repo
    resource_class: small

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: nrm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build successful"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache

  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint

  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier check
          command: npm run prettier:check

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_PRODUCTION} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_STAGING} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_DEV} --delete
            fi

  deploy-to-aws-cloudfront:
      executor: app-executor
      steps:
        - checkout
        - *show-current-branch-name
        - *install-aws-cli
        - *build-project
        - run:
            name: Deploy to AWS Cloudfront
            command: |
              aws configure set preview.cloudfront true
              if [ "${CIRCLE_BRANCH}" == "main" ]
              then
                aws cloudfront create-invalidation --distribution-id ${PRODUCTION_DISTRIBUTION_ID} --paths /\*
              elif [ "${CIRCLE_BRANCH}" == "staging" ]
              then
                aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths /\*
              else
                aws cloudfront create-invalidation --distribution-id ${DEV_DISTRIBUTION_ID} --paths /\*
              fi

  notify-success-via-telegram:
      executor: app-executor
      steps:
        - run:
            name: Notify success via telegram
            command: |
              curl -X POST \
              https://api.telegram.org/bot${TELEGRAM_BOT_API_TOKEN}/sendMessage \
              -d "chat_id=${TELEGRAM_CHANNEL_ID}" \
              -d "text=Your build on ${CIRCLE_BRANCH} branch has completed!
                  author: ${CIRCLE_PROJECT_USERNAME}
                  project: $CIRCLE_PROJECT_REPONAME
                  when: $(date +'%m/%d/%Y %T')
                "

  notify-via-telegram:
      executor: app-executor
      steps:
      - run:
        - telegram/send-message:
          to: $TELEGRAM_CHANNEL_ID # replace with your chat ID
          message: "Build succeeded!"
 
workflows:
  build_and_deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - deploy-to-aws-s3:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - main
      - notify-via-telegram:
          filters:
            branches:
              only:
                - develop
                - staging
                - main
     